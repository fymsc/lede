#  
# <https://github.com/KFERMercer/OpenWrt-CI>
#
# Copyright (C) 2019 P3TERX
#
# Copyright (C) 2020 KFERMercer
#
name: OpenWrt-MSC_x86-64

on:
  push:
    branches: 
      - master
  # schedule:
    # - cron: 0 20 * * *
  release:
    types: [published]

jobs:

  build_openwrt:

    name: Build OpenWrt firmware
    runs-on: ubuntu-latest

    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    
      # ========================固件定制部分开始========================
      # 设置变量
      - name: set env【设置变量，查看时间，磁盘空间】
        id: admin
        run: |
          release_tag="OpenWrt-MSC_x86-64_$(date +%y%m%d)"
          echo "##[set-output name=release_tag;]$release_tag"
          # 引用变量
          # ${{ steps.admin.outputs.release_tag }}
          echo 现在时间是：$(date +%Y)年$(date +%m)月$(date +%d)日$(date +%H)时$(date +%M)分$(date +%S)秒
          echo 磁盘剩余空间
          df -hl

      # ========================固件定制部分开始========================

      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php* android*
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean

          df -h

      - name: Update feeds【更新安装feeds】
        run: |
          sed -i 's/#src-git helloworld/src-git helloworld/g' ./feeds.conf.default
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          
          # 
          # ========================固件定制部分开始========================
          # 
          
      - name: 【添加主题链接】
        run: |
          cd package
          mkdir openwrt-packages
          cd openwrt-packages
          git clone https://github.com/openwrt-develop/luci-theme-atmaterial.git
          
          # LuCI主题:
          cat >> .config <<EOF
          CONFIG_PACKAGE_luci-theme-argon=y
          CONFIG_PACKAGE_luci-theme-atmaterial=y # 好像失效了
          CONFIG_PACKAGE_luci-theme-netgear=y
          EOF
          
          
      - name: 【修改默认设置】
        run: |
          # 修改ip地址
          sed -i 's/192.168.1.1/10.0.0.1/g' package/base-files/files/bin/config_generate
          # 修改root密码为 systemps
          sed -i 's/root::0:0:99999:7:::/root:\$1\$QQXAF6Qu\$hDLHnYthqyw36lFhPztHl0:18489:0:99999:7:::/g' package/base-files/files/etc/shadow
          # 修改hostname
          sed -i "s/set system.@system\[-1\].hostname='OpenWrt'/set system.@system\[-1\].hostname='${{ steps.admin.outputs.release_tag }}'/g" package/base-files/files/bin/config_generate
          # 互换网卡
          # sed -i "s/ucidef_set_interfaces_lan_wan 'eth1' 'eth0'/ucidef_set_interfaces_lan_wan 'eth0' 'eth1'/g" target/linux/rockchip/armv8/base-files/etc/board.d/02_network
          # sed -i "s/ucidef_set_interface_lan 'eth0'/ucidef_set_interface_lan 'eth1'/g" target/linux/rockchip/armv8/base-files/etc/board.d/02_network
          # 修改时区
          sed -i "s/set system\.@system\[-1\]\.timezone='UTC'/set system\.@system\[-1\]\.timezone='CST-8'/g" package/base-files/files/bin/config_generate
          # ===========================================
          
      - name: Generate configuration file【创建config文件】
        run: |
          rm -f ./.config*
          touch ./.config
          
          #
          # 在 cat >> .config <<EOF 到 EOF 之间粘贴你的编译配置, 需注意缩进关系
          # 例如:
          cat >> .config <<EOF
          CONFIG_TARGET_IMAGES_GZIP=y
          CONFIG_KERNEL_BUILD_USER="OpenWrt-MSC"
          CONFIG_KERNEL_BUILD_DOMAIN="Azure"
          EOF
          #
          # ===============================================================
          #
          # 【编译R2S固件】
          # cat >> .config <<EOF
          # CONFIG_TARGET_rockchip=y
          # CONFIG_TARGET_rockchip_armv8=y
          # CONFIG_TARGET_rockchip_armv8_DEVICE_friendlyarm_nanopi-r2s=y
          # EOF
          
          # 【修改固件大小】
          cat >> .config <<EOF
          CONFIG_TARGET_KERNEL_PARTSIZE=32 # 固件中内核分区大小
          CONFIG_TARGET_ROOTFS_PARTSIZE=512 # 固件中ROOTFS分区大小
          EOF
          
          # 【编译UEFI固件】
          cat >> .config <<EOF
          CONFIG_EFI_IMAGES=y
          EOF
          
          # 【多文件系统支持】
          # cat >> .config <<EOF
          # CONFIG_PACKAGE_kmod-fs-nfs=y
          # CONFIG_PACKAGE_kmod-fs-nfs-common=y
          # CONFIG_PACKAGE_kmod-fs-nfs-v3=y
          # CONFIG_PACKAGE_kmod-fs-nfs-v4=y
          # CONFIG_PACKAGE_kmod-fs-ntfs=y
          # CONFIG_PACKAGE_kmod-fs-squashfs=y
          # EOF
          
          # 【USB3.0支持】
          # cat >> .config <<EOF
          # CONFIG_PACKAGE_kmod-usb-ohci=y
          # CONFIG_PACKAGE_kmod-usb-ohci-pci=y
          # CONFIG_PACKAGE_kmod-usb2=y
          # CONFIG_PACKAGE_kmod-usb2-pci=y
          # CONFIG_PACKAGE_kmod-usb3=y
          # EOF
          
          # 【添加LUCI插件】
          cat >> .config <<EOF
          CONFIG_PACKAGE_luci-app-accesscontrol=y # 访问时间控制
          CONFIG_PACKAGE_luci-app-adblock=y # ADB广告过滤
          CONFIG_PACKAGE_luci-app-adbyby-plus=y # 广告屏蔽大师Plus +
          CONFIG_PACKAGE_luci-app-airplay2=y # Apple AirPlay2 无损音频接收服务器
          CONFIG_PACKAGE_luci-app-aria2=y # Aria2下载工具
          CONFIG_PACKAGE_luci-app-arpbind=y # IP/MAC绑定
          CONFIG_PACKAGE_luci-app-autoreboot=y # 支持计划重启
          CONFIG_PACKAGE_luci-app-baidupcs-web=y # 百度网盘管理
          CONFIG_PACKAGE_luci-app-cifsd=y # CIFS/SMB网络共享
          CONFIG_PACKAGE_luci-app-ddns=y # 动态域名 DNS（集成阿里DDNS客户端）
          CONFIG_PACKAGE_luci-app-diskman=y # 磁盘管理工具
          CONFIG_PACKAGE_luci-app-diskman_INCLUDE_btrfs_progs=y
          CONFIG_PACKAGE_luci-app-diskman_INCLUDE_lsblk=y
          CONFIG_PACKAGE_luci-app-diskman_INCLUDE_mdadm=y
          CONFIG_PACKAGE_luci-app-diskman_INCLUDE_kmod_md_raid456=y
          CONFIG_PACKAGE_luci-app-diskman_INCLUDE_kmod_md_linear=y
          CONFIG_PACKAGE_luci-app-docker=y # Docker容器
          CONFIG_PACKAGE_luci-app-familycloud=y # 家庭云盘
          CONFIG_PACKAGE_luci-app-filetransfer=y # 文件传输（可web安装ipk包）
          CONFIG_PACKAGE_luci-app-firewall=y # 添加防火墙
          CONFIG_PACKAGE_luci-app-frpc=y # 内网穿透Frp客户端
          CONFIG_PACKAGE_luci-app-hd-idle=y # 硬盘休眠
          CONFIG_PACKAGE_luci-app-ipsec-vpnd=y # IPSec VPN服务器
          CONFIG_PACKAGE_luci-app-meshwizard=y # 网络设置向导
          CONFIG_PACKAGE_luci-app-minidlna=y # 完全兼容DLNA / UPnP-AV客户端的服务器软件
          CONFIG_PACKAGE_luci-app-mwan3=y # MWAN3负载均衡
          CONFIG_PACKAGE_luci-app-mwan3helper=y # MWAN3分流助手
          CONFIG_PACKAGE_luci-app-netdata=y # Netdata实时监控（图表）
          CONFIG_PACKAGE_luci-app-nfs=y # NFS网络共享
          CONFIG_PACKAGE_luci-app-nlbwmon=y # 网络带宽监视器
          CONFIG_PACKAGE_luci-app-nps=y # 内网穿透nps
          CONFIG_PACKAGE_luci-app-pppoe-relay=y # PPOE 穿透
          CONFIG_PACKAGE_luci-app-ps3netsrv=y # PS3 NET服务器（用于加载蓝光/游戏ISO/PKG）
          CONFIG_PACKAGE_luci-app-wrtbwmon=y # 实时流量监测
          CONFIG_PACKAGE_luci-app-ramfree=y # 释放内存
          CONFIG_PACKAGE_luci-app-rclone_INCLUDE_rclone-webui=y # 命令行云端同步工具(Rclone界面)
          CONFIG_PACKAGE_luci-app-rclone_INCLUDE_rclone-ng=y # 命令行云端同步工具(Rclone另一个界面)
          CONFIG_PACKAGE_luci-app-rclone_INCLUDE_fuse-utils=y # 命令行云端同步工具(fuse-utils（挂载云存储）)
          CONFIG_PACKAGE_luci-app-sfe=y # Turbo ACC网络加速（flowoffload二选一）
          CONFIG_PACKAGE_luci-app-sqm=y # 流量智能队列管理（QOS）
          CONFIG_PACKAGE_luci-app-ssr-plus=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_V2ray_plugin=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_V2ray=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Trojan=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_NaiveProxy=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Redsocks2=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Kcptun=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_ShadowsocksR_Server=y
          CONFIG_PACKAGE_luci-app-statistics=y # 流量监控工具
          CONFIG_PACKAGE_luci-app-syncdial=y # 多拨虚拟网卡（原macvlan）
          CONFIG_PACKAGE_luci-app-transmission=y # BT下载工具
          CONFIG_PACKAGE_luci-app-ttyd=y # 网页终端命令行
          CONFIG_PACKAGE_luci-app-unblockmusic=y # 解锁网易云灰色歌曲3合1新版本
          CONFIG_UnblockNeteaseMusic_Go=y # Golang版本
          CONFIG_UnblockNeteaseMusic_NodeJS=y # NodeJS版本
          CONFIG_PACKAGE_luci-app-upnp=y # 通用即插即用UPnP（端口自动转发）
          CONFIG_PACKAGE_luci-app-usb-printer=y # USB 打印服务器
          CONFIG_PACKAGE_luci-app-vlmcsd=y # KMS服务器设置
          CONFIG_PACKAGE_luci-app-vsftpd=y # FTP服务器
          CONFIG_PACKAGE_luci-app-watchcat=y # 断网检测功能与定时重启
          CONFIG_PACKAGE_luci-app-webadmin=y  # Web管理页面设置
          CONFIG_PACKAGE_luci-app-wol=y # WOL网络唤醒
          CONFIG_PACKAGE_luci-app-wrtbwmon=y # 实时流量监测
          CONFIG_PACKAGE_luci-app-xlnetacc=y # 迅雷快鸟
          CONFIG_PACKAGE_luci-app-zerotier=y # ZeroTier内网穿透
          EOF
          
          # 【常用软件包】
          cat >> .config <<EOF
          CONFIG_PACKAGE_curl=y
          CONFIG_PACKAGE_htop=y
          CONFIG_PACKAGE_nano=y
          CONFIG_PACKAGE_screen=y
          CONFIG_PACKAGE_tree=y
          CONFIG_PACKAGE_vim-fuller=y
          CONFIG_PACKAGE_wget=y
          EOF
          
          # 取消编译VMware镜像以及镜像填充 (不要删除被缩进的注释符号):
          # cat >> .config <<EOF
          # # CONFIG_TARGET_IMAGES_PAD is not set
          # # CONFIG_VMDK_IMAGES is not set
          # EOF
      
          # 
          # ========================固件定制部分结束========================
          # 
           
          sed -i 's/^[ \t]*//g' ./.config
          make defconfig

      - name: Make download
        run: |
          make download -j8
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile firmware
        run: |
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin

      - name: Prepare artifact
        run: |
          mkdir -p ./artifact/firmware
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/

      - name: Deliver buildinfo
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.admin.outputs.release_tag }}_buildinfo
          path: ./artifact/buildinfo/

      - name: Deliver package
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.admin.outputs.release_tag }}_package
          path: ./artifact/package/

      - name: Deliver firmware
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.admin.outputs.release_tag }}_firmware
          path: ./bin/targets/
  

      - name: Upload release asset
        if: github.event == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.YOURTOKEN }}
          file: ./artifact/firmware/*
          tag: ${{ github.ref }}
          file_glob: true